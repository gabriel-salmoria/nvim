# Greek Letters
snippet ,a
\alpha
endsnippet

snippet ,A
\Alpha
endsnippet

snippet ,b
\beta
endsnippet

snippet ,B
\Beta
endsnippet

snippet ,t
\theta
endsnippet

snippet ,T
\Theta
endsnippet

snippet ,g
\gamma
endsnippet

snippet ,G
\Gamma
endsnippet

snippet ,pi
\pi
endsnippet

snippet ,PI
\Pi
endsnippet

snippet ,d
\delta
endsnippet

snippet ,D
\Delta
endsnippet

snippet ,l
\lambda
endsnippet

snippet ,L
\Lambda
endsnippet

snippet ,s
\sigma
endsnippet

snippet ,S
\Sigma
endsnippet

snippet ,o
\omega
endsnippet

snippet ,O
\Omega
endsnippet

snippet ,ph
\phi
endsnippet

snippet ,PH
\Phi
endsnippet

snippet ,i
\infty
endsnippet

# Logical Operators
snippet .m
\mapsto
endsnippet

snippet .i
\implies
endsnippet

snippet .io
\iff
endsnippet

# Mathematical Symbols
snippet ;int "b"
\int_{${1:lower}}^{${2:upper}} ${3:integrand} \, d${4:variable}
endsnippet

snippet ;der "b"
\frac{d${1:}}{d${2:}}
endsnippet

snippet ;pder "b"
\frac{\partial ${1:}}{\partial ${2:}}
endsnippet

snippet ;sum "b"
\sum_{${1:i=1}}^{${2:n}} ${3:expression}
endsnippet

snippet ;prod "b"
\prod_{${1:i=1}}^{${2:n}} ${3:expression}
endsnippet

snippet ;lim "b"
\lim_{{${1:n} \to ${2:\infty}}} ${3:expression}
endsnippet

snippet ;inf "b"
\infty
endsnippet

# Matrix Snippets
snippet ";mat(\d)(\d?)" "Matrix" riA
\\begin{matrix}
`!p
rows = int(match.group(1))
cols = int(match.group(2)) if match.group(2) else rows
matrix_snippet = '\\\\\n'.join([' & '.join(['' for _ in range(cols)]) for _ in range(rows)])
snip.rv = matrix_snippet
`
\\end{matrix}
$0
endsnippet

# Dot (ellipses)
snippet dot "Ellipses" iA
\ldots
endsnippet

# Vertical dots
snippet vdot "Vertical dots" iA
\vdots
endsnippet

# Begin
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# Figure
snippet fig "figure environment" bA
\begin{figure}[${1:htbp}]
	\centering
	\includegraphics[width=${2:\textwidth}]{${3:filename}}
	\caption{${4:caption}}
	\label{fig:${5:label}}
\end{figure}
endsnippet

# Equation
snippet beq "begin{equation} / end{equation}" bA
\begin{equation}
	$0
\end{equation}
endsnippet

# Math Modes
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Subscript
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Powers
snippet sq "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

# Superscript
snippet td "superscript" iA
^{$1}$0
endsnippet

# Fractions
snippet // "Fraction" iA
\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= i
snip.rv = stripped[0:i] + "\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Bars
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

snippet "smm" "summation" riA
\sum_{$1}^{$2}
endsnippet
